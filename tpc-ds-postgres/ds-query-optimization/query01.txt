-- start query 1 in stream 0 using template query1.tpl
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'TN'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100;

-- end query 1 in stream 0 using template query1.tpl

---- plan
Limit  (cost=53447.10..53447.17 rows=28 width=17)
  CTE customer_total_return
    ->  Finalize GroupAggregate  (cost=9652.68..9828.01 rows=1387 width=40)
          Group Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
          ->  Gather Merge  (cost=9652.68..9799.12 rows=1156 width=40)
                Workers Planned: 2
                ->  Partial GroupAggregate  (cost=8652.66..8665.66 rows=578 width=40)
                      Group Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
                      ->  Sort  (cost=8652.66..8654.10 rows=578 width=14)
                            Sort Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
                            ->  Hash Join  (cost=2322.68..8626.14 rows=578 width=14)
                                  Hash Cond: (store_returns.sr_returned_date_sk = date_dim.d_date_sk)
                                  ->  Parallel Seq Scan on store_returns  (cost=0.00..5988.98 rows=119798 width=18)
                                  ->  Hash  (cost=2318.11..2318.11 rows=365 width=4)
                                        ->  Seq Scan on date_dim  (cost=0.00..2318.11 rows=365 width=4)
                                              Filter: (d_year = 2000)
  ->  Sort  (cost=43619.08..43619.15 rows=28 width=17)
        Sort Key: customer.c_customer_id
        ->  Nested Loop  (cost=0.29..43618.41 rows=28 width=17)
              ->  Nested Loop  (cost=0.00..43445.12 rows=28 width=4)
                    Join Filter: (ctr1.ctr_store_sk = store.s_store_sk)
                    ->  CTE Scan on customer_total_return ctr1  (cost=0.00..43361.09 rows=462 width=8)
                          Filter: (ctr_total_return > (SubPlan 2))
                          SubPlan 2
                            ->  Aggregate  (cost=31.23..31.24 rows=1 width=32)
                                  ->  CTE Scan on customer_total_return ctr2  (cost=0.00..31.21 rows=7 width=32)
                                        Filter: (ctr1.ctr_store_sk = ctr_store_sk)
                    ->  Materialize  (cost=0.00..1.21 rows=12 width=4)
                          ->  Seq Scan on store  (cost=0.00..1.15 rows=12 width=4)
                                Filter: (s_state = 'TN'::bpchar)
              ->  Index Scan using customer_pkey on customer  (cost=0.29..6.19 rows=1 width=21)
                    Index Cond: (c_customer_sk = ctr1.ctr_customer_sk)
------------------------------------------------------------------------------------------
2. Created temp table instead of with
select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
into temp customer_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk;

select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'TN'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100;

------plan. total cost increased
1. GroupAggregate  (cost=10815.97..10847.18 rows=1387 width=40)
     Group Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
     ->  Sort  (cost=10815.97..10819.44 rows=1387 width=14)
           Sort Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
           ->  Hash Join  (cost=2322.68..10743.58 rows=1387 width=14)
                 Hash Cond: (store_returns.sr_returned_date_sk = date_dim.d_date_sk)
                 ->  Seq Scan on store_returns  (cost=0.00..7666.14 rows=287514 width=18)
                 ->  Hash  (cost=2318.11..2318.11 rows=365 width=4)
                       ->  Seq Scan on date_dim  (cost=0.00..2318.11 rows=365 width=4)
                             Filter: (d_year = 2000)

2. Limit  (cost=22212579.93..22212580.18 rows=100 width=17)
     ->  Sort  (cost=22212579.93..22212581.56 rows=653 width=17)
           Sort Key: customer.c_customer_id
           ->  Nested Loop  (cost=0.29..22212554.97 rows=653 width=17)
                 ->  Nested Loop  (cost=0.00..22211621.76 rows=653 width=4)
                       Join Filter: (ctr1.ctr_store_sk = store.s_store_sk)
                       ->  Seq Scan on customer_total_return ctr1  (cost=0.00..22209670.40 rows=10880 width=8)
                             Filter: (ctr_total_return > (SubPlan 1))
                             SubPlan 1
                               ->  Aggregate  (cost=680.41..680.42 rows=1 width=32)
                                     ->  Seq Scan on customer_total_return ctr2  (cost=0.00..680.00 rows=163 width=32)
                                           Filter: (ctr1.ctr_store_sk = ctr_store_sk)
                       ->  Materialize  (cost=0.00..1.21 rows=12 width=4)
                             ->  Seq Scan on store  (cost=0.00..1.15 rows=12 width=4)
                                   Filter: (s_state = 'TN'::bpchar)
                 ->  Index Scan using customer_pkey on customer  (cost=0.29..1.43 rows=1 width=21)
                       Index Cond: (c_customer_sk = ctr1.ctr_customer_sk)
------------------------------------------------------------------------------------------------
3.  select sr_customer_sk as ctr_customer_sk
   ,sr_store_sk as ctr_store_sk
   ,sum(SR_FEE) as ctr_total_return
   into temp customer_total_return
   from store_returns
   ,date_dim
   where sr_returned_date_sk = d_date_sk
   and d_year =2000
   group by sr_customer_sk
   ,sr_store_sk;

    select ctr_store_sk, AVG(ctr_total_return) as t_avg
   into temp ctr_total_return_avg
   from customer_total_return
   group by ctr_store_sk;

    SELECT
       c_customer_id
   FROM
       customer_total_return ctr1 ,
       store ,
       customer
   WHERE
       ctr1.ctr_total_return >
       (SELECT t_avg * 1.2 fROM ctr_total_return_avg ctr2
           where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
   AND s_store_sk = ctr1.ctr_store_sk
   AND s_state = 'TN'
   AND ctr1.ctr_customer_sk = c_customer_sk
   order by c_customer_id
            limit 100;

------ plan

1. GroupAggregate  (cost=10815.97..10847.18 rows=1387 width=40)
     Group Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
     ->  Sort  (cost=10815.97..10819.44 rows=1387 width=14)
           Sort Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
           ->  Hash Join  (cost=2322.68..10743.58 rows=1387 width=14)
                 Hash Cond: (store_returns.sr_returned_date_sk = date_dim.d_date_sk)
                 ->  Seq Scan on store_returns  (cost=0.00..7666.14 rows=287514 width=18)
                 ->  Hash  (cost=2318.11..2318.11 rows=365 width=4)
                       ->  Seq Scan on date_dim  (cost=0.00..2318.11 rows=365 width=4)
                             Filter: (d_year = 2000)

2. HashAggregate  (cost=761.60..764.10 rows=200 width=36)
     Group Key: ctr_store_sk
     ->  Seq Scan on customer_total_return  (cost=0.00..598.40 rows=32640 width=36)

3. Limit  (cost=848639.13..848639.38 rows=100 width=17)
     ->  Sort  (cost=848639.13..848640.76 rows=653 width=17)
           Sort Key: customer.c_customer_id
           ->  Nested Loop  (cost=0.29..848614.17 rows=653 width=17)
                 ->  Nested Loop  (cost=0.00..847680.96 rows=653 width=4)
                       Join Filter: (ctr1.ctr_store_sk = store.s_store_sk)
                       ->  Seq Scan on customer_total_return ctr1  (cost=0.00..845729.60 rows=10880 width=8)
                             Filter: (ctr_total_return > (SubPlan 1))
                             SubPlan 1
                               ->  Seq Scan on ctr_total_return_avg ctr2  (cost=0.00..25.89 rows=6 width=32)
                                     Filter: (ctr1.ctr_store_sk = ctr_store_sk)
                       ->  Materialize  (cost=0.00..1.21 rows=12 width=4)
                             ->  Seq Scan on store  (cost=0.00..1.15 rows=12 width=4)
                                   Filter: (s_state = 'TN'::bpchar)
                 ->  Index Scan using customer_pkey on customer  (cost=0.29..1.43 rows=1 width=21)
                       Index Cond: (c_customer_sk = ctr1.ctr_customer_sk)